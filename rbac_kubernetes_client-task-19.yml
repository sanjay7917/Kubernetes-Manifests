# RBAC at Client Level 
# Task: Assign devuser a limited permission on namespace called dev
# kubectl create namespace dev
# mkdir dev
# cd dev/
# sudo openssl genrsa -out devuser.key 2048
# sudo openssl req -new -key devuser.key -out devuser.csr
#   Organization Name → NAMESPACE —> dev
#   Common Name → USERNAME --> devuser
# sudo openssl x509 -req -in devuser.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out devuser.crt -days 500
# vim role.yml

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
     namespace: dev
     name: devuser-role            
rules:
- apiGroups: ["", "extensions", "apps"]
  resources: ["pods", "services", "namespaces", "deployments", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# kubectl create -f role.yml
---
# vim rolebinding.yml

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
   name: role-test
   namespace: dev
subjects:
- kind: User
  name: devuser
  apiGroup: ""
roleRef:
  kind: Role
  name: devuser-role
  apiGroup: ""

# kubectl create -f rolebinding.yml
# kubectl config set-credentials devuser --client-certificate=/home/ubuntu/dev/devuser.crt --client-key=/home/ubuntu/dev/devuser.key # Set credentials 
# kubectl config set-context devuser-context --cluster=kubernetes --namespace=dev --user=devuser # Set context to dev Namespace
# ============================================================================
# ======IF YOU WANT TO SEND .crt AND .key FILE TO CLIENT======
# cp ~/.kube/config .
# vim config
# DELETE KUBERNETES ADMIN USER, CONTEXT DETAILS AND CERTS FORM COPIED config FILE
# CHANGE CURRENT-CONTEXT TO devuser-context FROM kubernetes-admin@kubernetes
# contexts:
# - context:
#     cluster: kubernetes
#     namespace: dev
#     user: devuser
#   name: devuser-context
# current-context: devuser-context
# ============================================================================
# ============================  OR  ==========================================
# ============================================================================
# ======IF YOU DONT WANT TO SEND .crt AND .key FILE TO CLIENT======
# cat devuser.crt | base64 -w0 
# cat devuser.key | base64 -w0
# cp ~/.kube/config .
# vim config
# DELETE KUBERNETES ADMIN USER, CONTEXT DETAILS AND CERTS FORM COPIED config FILE
# CHANGE CURRENT-CONTEXT TO devuser-context FROM kubernetes-admin@kubernetes
#   current-context: devuser-context
# REMOVE devuser.crt and devuser.key PATH TO CAT OUTPUT 
# users:
# - name: devuser
#   user:
#     client-certificate-data: <PASTE devuser.crt CAT OUTPUT DATA HERE>
#     client-key-data: <PASTE devuser.key CAT OUTPUT DATA HERE>
# ============================================================================
# kubectl config get-contexts
# kubectl config use-context devuser-context (optional) # To change the context
# scp -i key.pem /home/ubuntu/dev/config ubuntu@<Public IP>:/home/ubuntu/dev
# scp -i key.pem /home/ubuntu/dev/devuser.key ubuntu@<Public IP>:/home/ubuntu/dev
# scp -i key.pem /home/ubuntu/dev/devuser.crt ubuntu@<Public IP>:/home/ubuntu/dev
# IF SCP COMMAND DOESN'T WORK COPY FILES FROM MASTER TO KUBERNETES CLIENT CAN DO MANUALLY
# === Take SSH of Kubernetes Client ===
# mkdir dev
# cd dev/
# kubectl get nodes --kubeconfig=/home/ubuntu/dev/config # It will display nodes if User will have permissions
# kubectl get pods --kubeconfig=/home/ubuntu/dev/config
# kubectl create deployment mydep --image=docker.io/httpd --kubeconfig=/home/ubuntu/dev/config
# kubectl get pods --kubeconfig=/home/ubuntu/dev/config
